plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.openapi.generator' version '7.0.1'

}

group = 'com.seek'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA en lugar de R2DBC
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web' // Spring MVC en lugar de WebFlux
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.19'
	implementation 'org.apache.commons:commons-math3:3.6.1'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.1'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j:8.0.33' // Driver JDBC de MySQL
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mysql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'com.auth0:java-jwt:4.4.0' // JWT

	// Mapstruct
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

}

tasks.named('test') {
	useJUnitPlatform()
}

task generateApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName = "spring"
	inputSpec = "$rootDir/src/main/resources/openapi.yaml"
	outputDir = layout.buildDirectory.dir("generated").get().asFile.absolutePath
	apiPackage = "com.seek.client_management.api"
	modelPackage = "com.seek.client_management.model"
	invokerPackage = "com.seek.client_management.invoker"
	configOptions = [
			interfaceOnly: "true",
			useSpringBoot3: "true"
	]
}

compileJava.dependsOn tasks.generateApi

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
			srcDir "$buildDir/generated/src/main/java"
		}
	}
}